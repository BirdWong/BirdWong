{"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-09","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"04-09","excerpt":""},{"title":"分类","text":"","path":"categories/index.html","date":"04-09","excerpt":""},{"title":"archives","text":"","path":"archives/index.html","date":"04-09","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-09","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"04-09","excerpt":""}],"posts":[{"title":"Java面试_操作系统","text":"线程与进程线程与进程理论 进程和线程以及他们的区别 进程：一个程序在一个数据集上的一次运行过程。系统资源分配的单位。 一个程序在不同数据集合上运行或一个程序在同样数据集上的多次运行都是不同的进程。 进程是独立的，有自己的内存空间和上下文环境，无法获取其他进程的存储空间。同一进程的两段代码不能同时执行，除非引入线程。 线程：进程的一个实体，是被系统独立调度和执行的基本单位，CPU使用的基本单位。 同一进程的线程可以共享同一内存空间。线程是属于进程的，当进程退出时该进程所产生的线程都会被强制退出并清除。线程占用的资源少于进程占用的资源 进程和线程都可以有优先级 进程在内存中的结构 代码区：存放CPU执行的机器指令，代码区是可共享，并且是只读的 数据段：全局变量、静态变量、常量（编译后知道大小）（未初始化的在一个区域(BBS区)，初始化的在相邻区域(数据区)） 全局变量：定义在函数外面，其他文件也能使用（external linkage） 静态变量：static 关键字修饰的变量： 函数外定义：全局变量，只在当前文件中可见（ internal linkage） 函数内定义：全局变量，只在此函数内可见 （C++）类中定义：全局变量，只在此类中可见 栈区：由编译器自动分配释放，存放函数的参数值、返回值和局部变量，在程序运行过程中实时分配和释放，栈区由操作系统自动管理，无须程序员手动管理 堆区：堆是由malloc()函数分配的内存块，使用free()函数来释放内存，堆的申请释放工作由程序员控制，容易产生内存泄漏 进程地址空间：内核地址空间+用户地址空间（代码段、数据段、堆、栈、共享库） 堆和栈的区别 栈：函数参数、返回地址、局部变量（运行入口知道大小） 编译器自动分配释放，存放函数的参数值，局部变量的值等。 申请后的响应：若栈的剩余空间大于申请空间，系统将为程序提供内存，否则提示栈溢出 大小限制：向低地址扩展，连续的内存区域，栈顶地址和栈最大容量是系统事先规定好的。如果申请的空间超过栈的剩余空间将栈溢出 申请效率：系统自动分配，速度快，程序员无法控制 存储的内容：函数调用时进栈顺序：主函数下一条指令的地址（函数调用语句的下一条可执行语句）、函数的各个参数（大多数c编译器中参数是从右往左入栈）、函数的局部变量。 调用结束的出栈顺序：局部变量、函数参数（从左到右）、栈顶指针指向最开始存的地址（即主函数的下一条指令） 堆：运行期间动态分配的内存空间（运行的时候才知道大小） 程序员自己分配释放，分配方式类似于链表 申请后的响应：操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时会遍历该链表，寻找第一个空间大于所申请空间的堆结点，将该结点从空闲结点链表删除，分配该结点的空间给程序。会在这块内存空间中的首地址处记录本次分配的大小。 这样delete语句才能正确释放本内存空间。由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动将多余的那部分重新放入空闲链表中 大小限制：向高地址扩展，不连续的内存区域，用链表存储，遍历方向是由低地址向高地址。堆大小受限于计算机系统的有效虚拟内存。获得的空间更大更灵活 申请效率：用new分配，速度慢，容易产生内部碎片，使用方便 存储的内容：一般在堆的头部用一个字节放堆的大小 进程状态 创建（信息设置完但资源有限） 运行（占用cpu） 就绪（等待分配cpu） 等待（等待某个是啊金的发送） 终止（进程完成执行） 进程间的通信如何实现 通信的方式有：信号、信号量、消息队列、共享内存、管道、有名管道 管道(pipe)：半双工通信，数据单向流动；只能父子进程通信；速度慢 有名管道(FIFO)：任何进程都能通信；速度慢 信号量（semophore）：计数器，控制多个进程对共享资源的访问（多进程或线程的同步方法）；不能传递复杂消息 信号：用于通知接收进程某个事件已经发送 消息队列：消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递少、管道只能承载无格式字节流以及缓冲区大小受限的缺点；容量受限，第一次读的时候要考虑上一次没有读完数据的问题 需要消息复制，不需考虑同步问题，不适宜信息量大或操作频繁的场合 共享内存：映射一段能被其他进程访问的内存，由一个进程创建，可被多个进程访问，要保持同步。与信号量结合使用，用来达到进程间的同步及互斥，最快的IPC方式 不需要消息复制，信息量大，快捷，在任意数量的进程之间进行高效双向通信的机制。 套接字：可用于不同机器间的进程通信，由ip地址和端口号连接而成 进程调度 选择一个可用的进程到cpu上执行 进程进入系统，会被加入到作业队列（包括系统的所有进程）队列通常用链表实现，头结点指向的链表的第一个和最后一个pcb块的指针，每个pcb包括一个指向就绪队列的下一个pcb的指针域 运行—&gt;就绪：IO请求（–&gt;IO队列–&gt;IO结束）；时间片结束；创建一个子进程（等待子进程结束）；等待中断（中断发生） PCB： 进程标志 进程状态 程序计数器 寄存器 cpu调度信息：进程优先级、调度队列指针、其他调度参数 内存管理信息：基址寄存器 界限寄存器 页表/段表 记账信息：cpu时间、实际使用时间、时间界限、记账数据、作业或进程数量 I/O状态信息：分配给进程的IO设备列表、打开文件列表 线程状态 创建(new)、就绪(runnable/start)、运行(running)、阻塞(blocked)、等待(waiting)、时间等待(time waiting) 和 消亡(dead/terminated)。在给定的时间点上，一个线程只能处于一种状态 线程同步的方式 互斥量 Synchronized/Lock：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问 信号量 Semphare：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量 事件(信号)，Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作 处理机调度 先来先服务（FCFS，First-Come-First-Served）: 此算法的原则是按照作业到达后备作业队列（或进程进入就绪队列）的先后次序来选择作业（或进程）。 短作业优先（SJF,Shortest Process Next）：这种调度算法主要用于作业调度，它从作业后备队列中挑选所需运行时间（估计值）最短的作业进入主存运行。 时间片轮转调度算法（RR，Round-Robin）：当某个进程执行的时间片用完时，调度程序便停止该进程的执行，并将它送就绪队列的末尾，等待分配下一时间片再执行。然后把处理机分配给就绪队列中新的队首进程，同时也让它执行一个时间片。这样就可以保证就绪队列中的所有进程，在一给定的时间内，均能获得一时间片处理机执行时间。 高响应比优先（HRRN，Highest Response Ratio Next）: 按照高响应比（（已等待时间＋要求运行时间）/ 要求运行时间）优先的原则，在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比RP然后选择其值最大的作业投入运行。 优先权(Priority)调度算法: 按照进程的优先权大小来调度，使高优先权进程得到优先处理的调度策略称为优先权调度算法。 多级队列调度算法：多队列调度是根据作业的性质和类型的不同，将就绪队列再分为若干个子队列，所有的作业（或进程）按其性质排入相应的队列中，而不同的就绪队列采用不同的调度算法。 线程&amp;锁 什么是死锁？ 死锁产生的条件？ 死锁的概念 在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。 死锁产生的四个必要条件 互斥：至少有一个资源必须属于非共享模式，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止； 占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有； 非抢占：进程不能被抢占，即资源只能被进程在完成任务后自愿释放 循环等待：若干进程之间形成一种头尾相接的环形等待资源关系 死锁的处理策略；鸵鸟策略、预防策略、避免策略、检测与恢复策略 死锁预防 打破互斥条件。即允许进程同时访问某些资源。但是有的资源是不允许被同时访问的。像打印机等等，这是有资源本身的属性所决定的。所以这种办法并无实用价值 打破不可抢占条件。即允许进程强行从占有者那里多去某些资源。就是说，当一个进程已占有了某些资源，他又申请新的资源，但不能立即被满足时，它必须释放所有占有的全部资源，然后再重新申请。它所释放的资源可以分配给其他进程。这就相当于该进程占有的资源被隐蔽地强占了，这种预防死锁的方法实现起来困难，会减低系统性能。 打破占有且申请条件。可以实行资源与预先分配策略。即进程在运行前一次性的向系统申请他所需要的全部资源，如果某个进程所需要的全部资源得不到满足，则不分配资源，此进程暂不运行。只有当系统能够满足当前进程的全部资源需求时，才一次性的将所申请的资源全部分配给该进。由于运行的进程已占有了它所需要的全部资源，所以不会发生占有资源又申请资源的现象，因此不会发生死锁。但是这种策略也有如下缺点 在许多情况下，一个进程在执行之前不可能知道他所需要的全部资源。这是由于进程在执行时是动态的，不可预测的； 资源利用率低。无论所分配资源和使用到，一个进程只有在占有所需要的全部资源后才能执行。即使有些资源做后才被该进程用到一次，但该进程在生存期间却一直占有他们，造成长期占着不用的状况。这显然是一种极大的资源浪费 降低了进程的并发性。因为资源有限，又加上存在浪费，能分配到所需全部资源的进程个数就必然少了 打破循环等待条件，实行资源有序分配策略。采用这种策略，即把资源实现分类编号，按号分配，使进程在申请，占用资源时不会形成环路。所有进程对资源的请求必须严格按资源序号递增的顺序提出。进程占用了小号资源，才能申请大号资源，就不会产生环路，从而预防了死锁。这种策略与前面的策略相比，资源的利用率额系统吞吐量都有很大提高，但是也存在以下缺点： 限制了进程对资源的请求，同时给系统中所有资源合理编号也是件困难事，并增加了系统开销 为了遵循按编号申请的次序，暂不使用的资源也需要提前申请，从而增加了进程对资源的占用时间 线程如何避免死锁 固定加锁的顺序(针对锁顺序死锁) 开放调用(针对对象之间协作造成的死锁) 在一个锁内尽量不要调用其他带锁的方法 使用定时锁–&gt;tryLock() 如果等待获取锁时间超时，则抛出异常而不是一直等待！ 银行家算法 如何理解分布式锁 分布式锁，是控制分布式系统之间同步访问共享资源的一种方式。在分布式系统中，常常需要协调它们的动作。如果不同的系统或是同一个系统的不同主机之间共享了一个或一组资源，那么访问这些资源的时候，往往需要不出来防止彼此干扰来保证一致性，在这种情况下，便需要使用分布式锁 临界区问题 【共享数据的互斥】 临界区：在该区中进程可能改变共同变量、更新一个表、写一个文件；没有两个进程能同时在临界区内执行。 123456do &#123; 【进入区】 // 请求允许进入其临界区 临界区 【退出区】 剩余区 &#125; while (true); eg. Peterson算法 123456789101112131415int turn; // 表示哪个进程可以进入临界区boolean flag[2]; // 表示哪个进程想要进入临界区 // Pi进程的结构------------------------------- do &#123; // 进入区 flag[i] = true; turn = j; while (flag[i] &amp;&amp; turn == j); // 临界区 flag[i] = false; // Pi最多在Pj进入临界区一次后就能进入---有限等待 // 剩余区&#125; while (true); 满足3个要求： 互斥（进程在临界区内执行，其他进程就不能在其临界区内执行） 前进（如果没有进程在其临界区执行且有进程需进入临界区，那么只有那些不在剩余区内执行的进程可参加选择，以确定谁能下一个进入临界区，且这种不能无线） 有限等待：从一个进程请求允许进入临界区到进入临界区为止，其他进程允许进入其临界区的次数有限 信号量 信号量S是一个整数型变量，信号量分为计数信号量（初始化为可用资源的数量）和二进制信号量（互斥锁）。 除了初始化外，只能通过两个标准【原子】操作：wait()和signal()来访问（这些操作被成为P测试和V增加） 123456789// 进程需要资源的时候 wait(S) &#123; while (S &lt;= 0); // 被阻塞----忙等待 S--; &#125; // 进程释放资源的时候 signal(S) &#123; S++; &#125; 这里定义的信号量【自旋锁】的主要缺点： 忙等待：当一个进程位于其临界区内时，其他试图进入临界区的进程需要在进入区连续第循环，浪费了cpu时钟 优点：进程在等待锁时不需要上下文切换，节省时间（如果锁占用时间短） 克服忙等：进程信号量不为正时不忙等二十阻塞自己，放入一个与信号量相关的等待队列中，状态为等待。 线程同步与阻塞的关系？同步一定阻塞吗？阻塞一定同步吗？ 线程同步与阻塞没有一点关系 同步和异步关注的是消息通信机制(synchronous communication / asynchronous communication)。所谓同步，就是在发出一个调用时，在没有得到结果之前，这个调用就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立即得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。 阻塞和非阻塞关注的是程序在等待调用结果(消息、返回值)时的状态。阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立即得到结果之前，该调用不会阻塞当前线程 内存管理 什么是缓冲区溢出？原因？ 缓冲区溢出是指计算机向缓冲区填充数据的时候超过了缓冲区本身的容量，溢出的数据覆盖在了合法数据上； 造成缓冲区溢出的主要原因就是程序中没有检查用户输入的参数 分页和分段有什么区别 段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片） 页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。 两者的不同点： 目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息； 大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定； 地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间； 信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制； 内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。 什么是虚拟内存 虚拟内存允许执行进程不必完全在内存中。虚拟内存的基本思想是：每个进程拥有独立的地址空间，这个空间被分为大小相等的多个块，称为页(Page)，每个页都是一段连续的地址。这些页被映射到物理内存，但并不是所有的页都必须在内存中才能运行程序。当程序引用到一部分在物理内存中的地址空间时，由硬件立刻进行必要的映射；当程序引用到一部分不在物理内存中的地址空间时，由操作系统负责将缺失的部分装入物理内存并重新执行失败的命令。这样，对于进程而言，逻辑上似乎有很大的内存空间，实际上其中一部分对应物理内存上的一块(称为帧，通常页和帧大小相等)，还有一些没加载在内存中的对应在硬盘上 注意，请求分页系统、请求分段系统和请求段页式系统都是针对虚拟内存的，通过请求实现内存与外存的信息置换。 虚拟内存的应用与优点 虚拟内存很适合在多道程序设计系统中使用，许多程序的片段同时保存在内存中。当一个程序等待它的一部分读入内存时，可以把CPU交给另一个进程使用。虚拟内存的使用可以带来以下好处： 在内存中可以保留多个进程，系统并发度提高 解除了用户与内存之间的紧密约束，进程可以比内存的全部空间还大 页面置换算法有哪些 最佳置换算法（Optimal）：即选择那些永不使用的，或者是在最长时间内不再被访问的页面置换出去。（它是一种理想化的算法，性能最好，但在实际上难于实现）。 先进先出置换算法FIFO：该算法总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面予以淘汰。 最近最久未使用置换算法LRU（Least Recently Used）：该算法是选择最近最久未使用的页面予以淘汰，系统在每个页面设置一个访问字段，用以记录这个页面自上次被访问以来所经历的时间T，当要淘汰一个页面时，选择T最大的页面。 Clock置换算法：也叫最近未用算法NRU（Not RecentlyUsed）。该算法为每个页面设置一位访问位，将内存中的所有页面都通过链接指针链成一个循环队列。当某页被访问时，其访问位置“1”。在选择一页淘汰时，就检查其访问位，如果是“0”，就选择该页换出；若为“1”，则重新置为“0”，暂不换出该页，在循环队列中检查下一个页面，直到访问位为“0”的页面为止。由于该算法只有一位访问位，只能用它表示该页是否已经使用过，而置换时是将未使用过的页面换出去，所以把该算法称为最近未用算法。 最少使用置换算法LFU：该算法选择最近时期使用最少的页面作为淘汰页。 颠簸/抖动 ​ 颠簸本质上是指频繁的页调度行为，具体来讲，进程发生缺页中断，这时，必须置换某一页。然而，其他所有的页都在使用，它置换一个页，但又立刻再次需要这个页。因此，会不断产生缺页中断，导致整个系统的效率急剧下降，这种现象称为颠簸（抖动）。 内存颠簸的解决策略包括： 如果是因为页面替换策略失误，可以修改替换算法来解决这个问题； 如果是因为运行的程序太多，造成程序无法同时将所有频繁访问的页面调入内存，则要降低多道程序的数量； 否则，还剩下两个办法：终止该进程或增加物理内存容量。 局部性原理 时间上的局部性：最近被访问的页在不久的将来还会被访问。 空间上的局部性：内存中被访问的页周围的页也很可能被访问。 CPU中的缓存和操作系统中的缓存分别是什么？ ​ 操作系统的缓存是指快表。在操作系统中，为提高系统的存取速度，在地址映射机制中增加一个小容量的联想寄存器，即快表，用来存放当前访问最频繁的少数活动页面的页号。当某用户需要存取数据时，根据数据所在的逻辑页号在快表中找到其对应的内存块号，再联系页内地址，形成物理地址。如果在快表中没有相应的逻辑页号，则地址映射仍可以通过内存中的页表进行，得到空闲块号后必须将该块号填入快表的空闲块中。如果快表中没有空闲块，则根据淘汰算法淘汰某一行，再填入新的页号和块号。快表查找内存块的物理地址消耗的时间大大降低了，使得系统效率得到了极大的提高。 ​ CPU中的缓存是指高速缓存。CPU的执行速度越来越快，系统架构越来越先进，而主存的结构和存取速度改进则较慢，因此，高速缓存技术将越来越重要。 高速缓冲存储器是位于CPU和内存之间的临时存储器，它的容量比内存小但交换速度快。在高速缓冲存储器中的数据是内存中的一小部分，但这一小部分是短时间内CPU即将访问的。当CPU调用大量数据时，就可避开内存直接从高速缓冲存储器中调用，从而加快读取速度。 文件管理","path":"2019/04/09/Java面试-操作系统/","date":"04-09","excerpt":"","tags":[{"name":"面试","slug":"面试","permalink":"https://jijiking51.cn/tags/面试/"},{"name":"操作系统","slug":"操作系统","permalink":"https://jijiking51.cn/tags/操作系统/"}],"preview":"http://img.jijiking51.cn/20981.jpg"},{"title":"github利用hexo搭建个人博客","text":"准备工作安装gitGitHub Windows 安装Node.JSNode.JS 确认npm命令已经配置好 安装Hexo1npm install hexo-cli -g 初始化配置Hexo创建根目录12# 创建博客根目录mkdir blogroot 初始化Hexo123456# 进入根目录cd blogroot# 初始化项目hexo init# 安装插件npm install 安装git插件安装配置安装git插件12# 安装git插件npm install hexo-deployer-git --save 修改配置文件123456# 修改根目录下的_config.ymldeploy: type: git // 上传方式 repository: //项目地址 branch: // 上传分支 message: // 上传时默认信息，如果不设置则为上传时的时间 查看效果12345678# 生成文章hexo n# 生成public静态文件hexo g# 本地预览效果hexo s# 将public静态文件上传到githubhexo d github准备创建博客仓库 创建项目 项目名为用户名.github.io 点击项目setting，下翻到GitHub Pages，设置上传的分支（与上面配置里面写的相同），并且按change theme选择主题（默认就行） 配置ssh私钥 右键git bash 123# username和email@email.com替换为自己的git config --global user.name \"username\"git config --global user.email \"email@email.com\" 生成秘钥 12# 输入后一路回车就好ssh-keygen -t rsa -C \"账户邮箱\" 输入eval &quot;$(ssh-agent -s)&quot;，添加密钥到ssh-agent。 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent。 github的个人setting中找到SSH and GPG keys，添加新的ssh，打开C:\\Users\\Administrator.ssh\\id_rsa.pub 文件，将里面的内容张贴到里面 输入ssh -T git@github.com，出现用户名则表示成功 配置个人域名 github点击settings，拉到下面Custom domain处 ，填写自己域名 本地的source中添加CNAME文件（更新博客的时候保证每次都带有这个文件），检查项目下是否出现了CNAME文件，内容是填写的域名（不要加http，www），如果没有就创建一个新的文件并填写对应内容 ping一下github分配的博客页面，得到一个IP，在自己的域名解析中，将www和@的都解析到这个IP上 坑配置好github Page后报错Page build failed: Date is not a valid datetime,这是非jekyll生成的站点，要添加.nojekyll空文件在repository的根目录下，关闭针对jekyll的检查。 方法： ​ 在github根目录下创建空文件.nojekyll,同样，我们要在source中添加这个文件 更换主题使用gal主题 获取主题 1git clone https://github.com/ZEROKISEKI/hexo-theme-gal.git themes/gal 将clone下来的文件/_source/的tags和categories文件夹拷贝到博客根目录下的source文件夹下 在博客根目录下下载对应插件 12345npm install hexo-renderer-sass --save npm install hexo-renderer-scss --savenpm install hexo-generator-json-content --save 添加内容到根目录下的_config.yml 123456789101112131415161718192021jsonContent: dateFormat: MM-DD pages: title: true text: true path: true date: true excerpt: true preview: true posts: title: true text: true path: true date: true excerpt: true tags: [&#123; name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;] preview: true 开启搜索，404，分类，标签页面 1234hexo new page \"search\" // 搜索功能的必须步骤hexo new page \"404\" // 开启404页面hexo new page \"categories\" // 开启分类页面hexo new page \"tags\" // 开启标签页面 配置分类和标签页面 12345678910111213141516171819202122232425262728293031323334# 修改根目录下的source/categories/index.md文件---title: 文章分类date: 2017-05-27 13:47:40---# 添加 type: \"categories\"---title: 文章分类date: 2017-05-27 13:47:40type: \"categories\"---# 修改根目录下source/tags/index.md文件---title: 标签date: 2017-05-27 14:22:08---# 添加type: \"tags\"---title: 文章分类date: 2017-05-27 13:47:40type: \"tags\"---# 以后写文章头部示例---title: 测试date: 2019-04-2 14:02:57categories: - demotags:- 测试标签1- 测试标签2--- 其他配置参考gal项目wiki","path":"2019/04/09/github利用hexo搭建个人博客/","date":"04-09","excerpt":"","tags":[{"name":"hexo","slug":"hexo","permalink":"https://jijiking51.cn/tags/hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"https://jijiking51.cn/tags/个人博客/"},{"name":"踩坑","slug":"踩坑","permalink":"https://jijiking51.cn/tags/踩坑/"}],"preview":"http://img.jijiking51.cn/42992.jpg"}]}